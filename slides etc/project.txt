module debouncer(
input logic clk, button, output logic pulse
    );
    logic [24:0] timer;
    typedef enum logic [1:0]{S0,S1,S2,S3} states;
    states state, nextState;
    logic gotInput;
    
    always_ff@(posedge clk)
        begin    
            state <= nextState;
            if(gotInput)
                timer <= 25000000;
            else
                timer <= timer - 1;
        end
    always_comb
        case(state)
            S0: if(button) 
                begin //startTimer
                    nextState = S1;    
                    gotInput = 1;
                end
                else begin nextState = S0; gotInput = 0; end
            S1: begin nextState = S2; gotInput = 0; end
            S2: begin nextState = S3; gotInput = 0; end
            S3: begin if(timer == 0) nextState = S0; else nextState = S3; gotInput = 0; end
            default: begin nextState = S0; gotInput = 0; end
            endcase
    
    assign pulse = ( state == S1 );
endmodule
module comparator( input logic [3:0] a, b, output logic a_lt_b, a_eq_b, a_gt_b);
    always@* 
        begin
            if(a<b) begin
            a_lt_b = 1;
            a_eq_b = 0;
            a_gt_b = 0;
            end
            else if( a == b) begin
            a_lt_b = 0;
            a_eq_b = 1;
            a_gt_b = 0;
            end
            else begin
            a_lt_b = 0;
            a_eq_b = 0;
            a_gt_b = 1;
            end
        end

endmodule
module seven_segment( input logic clk, input logic [2:0] in, input logic[3:0] in3, in2, in1, in0,
output logic [6:0] seg, output logic [3:0] an, logic dp  );

endmodule

module data_mem( input logic clk, reset, M_we, M_re, input logic [3:0] M_add, M_wd,
output logic [3:0] M_rd);
    logic [3:0] datamem [15:0];
    integer i;
    always_ff@(posedge clk, posedge reset)
    begin
    if(reset)
        for(i = 0; i<16; i = i+1) begin
        datamem[i] <= 4'b0;
        end
    if(M_we) datamem[M_add] <= M_wd;
    else if(M_re) M_rd <= datamem[M_add];
    end
endmodule
module alu(
input logic [3:0] a, b, input logic [1:0] alu_sel, output logic [3:0] out
    );
    always_comb
    begin
        case(alu_sel)
        2'b00: out = a + b;
        2'b01: out = a - b;
        2'b10: out = 0; //sorting maybe
        2'b11: out = 0; //
        endcase
    end
endmodule
module register_file(
input logic clk, reset, RF_we, input logic[2:0] RF_ad1, RF_ad2, RF_wa, RF_wd,
output logic [3:0] RF_d1, RF_d2 );
    logic [3:0] numbers [7:0];
    integer i;
    always_ff@(posedge clk, posedge reset)
    begin
    if(reset)
    for(i = 0; i<8; i=i+1) begin
    numbers[i] <= 4'b0;
    end
    else 
        begin
    
        if(RF_we)
            numbers[RF_wa] <= RF_wd;
            RF_d1 <= numbers[RF_ad1];
            RF_d2 <= numbers[RF_ad2];
        end
     end
    
endmodule
module mux2to1 #(parameter width = 12)(
input logic [width-1:0] i0, i1, sel, output logic [width-1:0] y);
assign y = sel ? i1:i0;
    
endmodule
module datapath( input logic clk, reset, M_re, M_we, isexternal, RF_we,  input logic [2:0] M_add, RF_ad1, RF_ad2, RF_wa, 
input logic [1:0] alu_sel, output logic [3:0] out);
    mux2to1 #(4) mux();
    register_file reg_file();
    alu alu();
    data_mem memory();
    seven_segment sev_seg();
    
module controller( input logic clk, reset, left_button, right_button, input logic [11:0] instruction, external_ins,
output logic [3:0] M_add, output logic M_re, M_we, RF_we, isexternal, output logic [2:0] RF_wa, RF_d1, RF_d2,
output logic [1:0] alu_sel);
//logic mid_button, lower_button, upper_button;  //
logic [2:0] pc_out;
logic pc_load, ir_load;
logic [11:0] ir_instruction, im_instruction;
assign right_button = isexternal;
//assign pc_load = ~isexternal;
// left_button 
pc pc(clk,reset, left_button, pc_out); 
ins_mem ins_memory(pc_out,im_instruction);
ir ir(clk, ir_load, reset, isexternal, external_ins, im_instruction,  instruction);
    always_ff @(posedge clk, posedge reset)
        begin   
            if(reset)
            begin
            isexternal <= 0;
            ir_load <= 0;
            pc_load <= 0;
            M_re <= 0;
            M_we <= 0;
            RF_we <= 0;
            RF_wa <= 0;
            RF_d1 <= 0;
            RF_d2 <= 0;
            alu_sel <= 0;
            M_add <= 0;
            end
            else
            begin
            if(right_button | left_button)
                begin
                case(instruction[11:9])
                    3'b000 : begin         //load
                    M_add <= instruction[3:0];
                    M_re <= 1;
                    M_we <= 0;
                    RF_we <= 1;
                    RF_wa <= instruction[6:4];
                    isexternal <= 1;
                    ir_load <= 1;
                    pc_load <= 0;
                    if(mid_button) begin
                    //load instruction from switches to ins memory
                    end
                    end
                    3'b001: begin          //store
                    M_add <= instruction[3:0];
                    M_re <= 0;
                    M_we <= 1;
                    RF_we <= 0;
                    RF_wa <= instruction[6:4];
                    isexternal <= 0;
                    ir_load <= 0;
                    pc_load <= 0;
                    end
                    3'b010: begin           //subtract
                    M_re <= 0;
                    M_we <= 0;
                    RF_we <= 1;
                    RF_wa <= instruction[8:6];
                    alu_sel[1] <= 0;
                    alu_sel[0] <= 1;
                    RF_d1 <= instruction[2:0];
                    RF_d2 <= instruction [5:3];
                    isexternal <= 0;
                    ir_load <= 0;
                    pc_load <= 0;
                    end
                    3'b011: begin             //add
                    M_re <= 0;
                    M_we <= 0;
                    RF_we <= 1;
                    RF_wa <= instruction[8:6];
                    alu_sel[1] <= 0;
                    alu_sel[0] <= 0;
                    RF_d1 <= instruction[2:0];
                    RF_d2 <= instruction[5:3];
                    isexternal <= 0;
                    ir_load <= 0;
                    pc_load <= 0;
                    end
                    3'b100: begin             //ascending sort
                    end
                    3'b101: begin             // descending sort
                    end
                    3'b110: begin             // display
                    end
                    
                    endcase
                    end
       end
       end
endmodule
module ir( input logic clk, load, reset, isExternal, input logic [11:0] i0, i1, 
output logic [11:0] out);
    always_ff@(posedge clk, posedge reset)
    if(reset) out <= 12'b0;
    else 
        begin
        if(load)
            begin
            if(isExternal == 0) out <= i0;
            else out <= i1;
            end
        end
    
    
    
endmodule
module ins_mem( input logic[2:0] adrr, output logic [11:0] y);
    always_comb
        case(adrr)
        0:  y = 12'b000_00_001_0010; // load RF[1] = D[2]
        1:  y = 12'b001_00_001_0100; // store D[4] = RF[1]
        2:  y = 12'b010_010_000_001; // RF[2] = RF[0] - RF[1]
        3:  y = 12'b011_010_000_001; // RF[2] = RF[0] + RF[1]
        4:  y = 12'b100_000_010_100; // asc sort RF[2], RF[3], RF[4], RF[5]  --> write RF[0], RF[1], RF[2], RF[3]
        5:  y = 12'b101_000_010_100;  // desc sort RF[2], RF[3], RF[4], RF[5] --> write RF[0], RF[1], RF[2], RF[3]
        6:  y = 12'b110_XXX_010_100; //display RF[1], RF[2], RF[3], RF[4] 
        7:  y= 12'b111_XXX_XXX_XXX; // not used
        endcase
endmodule
module pc(
input logic clk, rst, load,output logic [2:0] result
    );
    always_ff @(posedge clk, posedge rst)
    if(rst) result <= 0;
    else if(load) result <= result + 1;
    
endmodule

