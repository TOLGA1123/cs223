module lab_calculator_tb();
     logic a,b,c,d,y,z;
     lab_calculator dut(a,b,c,d,y,z);
     initial begin
     a=0; b=0; c=0; d=0; #10;
     b=1; #10;
     a=1; b=0; #10;
     b=1; #10;
     a=0; b=0; d=1; #10;
     b=1; #10;
     b=0; a=1; #10;
     b=1; #10;
     a=0; b=0; d=0; c=1; #10;
     b=1; #10;
     a=1; b=0; #10;
     b=1; #10;
     d=1; a=0; b=0; #10;
     b=1; #10;
     a=1; b=0; #10;
     b=1; #10;
    end
endmodule

module twobit_adder_tb();
logic a[1:0], b[1:0], cin, s[1:0], cout;
 twobit_adder dut(a[1:0],b[1:0],cin,s[1:0],cout);
    initial begin
    a[0]=0; a[1]=0; b[0]=0; b[1]=0; cin=0; #10;
    a[0] = 1; #10;
    a[0] = 0; a[1] = 1; #10;
    a[1] = 0; b[0] = 1; #10;
    b[0] = 0; b[1] = 1; #10;
    a[0] = 1; a[1] = 1; b[1] = 0; #10;
    a[1] = 0; b[0] = 1; #10;
    b[1] = 1; b[0] = 0; #10;
    a[0] = 1; a[1] = 0; #10;
    b[0] =1;  b[1] = 0; #10;
    a[1] = 1; b[1] = 1; #10;
    a[0] = 1; #10;
    a[0] = 0; #10;
    a[0] = 1; a[1] = 0; #10;
    a[1] = 1; a[0] = 0; #10;
        cin = 1; a[0]=0; a[1]=0; b[0]=0; b[1]=0;  #10;
        a[0] = 1; #10;
        a[0] = 0; a[1] = 1; #10;
        a[1] = 0; b[0] = 1; #10;
        b[0] = 0; b[1] = 1; #10;
        a[0] = 1; a[1] = 1; b[1] = 0; #10;
        a[1] = 0; b[0] = 1; #10;
        b[1] = 1; b[0] = 0; #10;
        a[0] = 1; a[1] = 0; #10;
        b[0] =1; a[0] = 0; b[1] = 0; #10;
        a[1] = 1; b[1] = 1; #10;
        a[0] = 1; #10;
        a[0] = 0; #10;
        a[0] = 1; a[1] = 0; #10;
        a[1] = 1; a[0] = 0; #10;
    
    
    
    end
endmodule

module full_adder(
    input logic a,b,cin,
    output logic sum,cout
    );
    logic s1,c1,c2;
    half_adder adder1(a,b,s1,c1);
    half_adder adder2(cin,s1,sum,c2);
    assign cout = c2|c1;
endmodule

module half_adder(
    input logic a,b,
    output logic s,c
    );
    assign s= a^b;
    assign c = a&b;
endmodule

module twobit_adder(
    input logic a[1:0], b[1:0],cin,
    output logic s[1:0], cout
    );
    logic cin1;
    full_adder adder1(a[0],b[0],cin,s[0],cin1);
    full_adder adder2(a[1],b[1],cin1,s[1],cout);
endmodule

module full_adder_tb();
    logic a,b,cin,sum,cout;
    full_adder dut(a,b,cin,sum,cout);
    initial begin
        a=0; b=0; cin=0; #10;
        cin=1; #10
        b=1; cin=0; #10;
        cin=1; #10;
        a=1; b=0; cin=0; #10;
        cin = 1; #10;
        b=1; cin=0; #10;
        cin=1; #10;
        end
endmodule

module half_subtractor(
    input logic a,b,
    output logic d,bout
    );
    assign d = a^b;
    assign bout = ~a&b;
endmodule

module lab_calculator(input logic a,b,c,d, output logic y,z);
 assign y = (a^b) & ~c&~d | ~(a&b) & ~c&d | (a^b) & c&~d | (a^b) & c&d;
 assign z = (a&b) & c & ~d | (~a&b) &c&d;
endmodule